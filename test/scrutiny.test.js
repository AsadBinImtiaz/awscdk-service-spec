"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const schema_1 = require("../lib/schema");
test('spot-check IAM identity tags', () => {
    const prop = lib_1.propertySpecification('AWS::IAM::Role', 'Policies');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineIdentityPolicies);
});
test('IAM AssumeRolePolicy', () => {
    // AssumeRolePolicyDocument is a resource policy, because it applies to the Role itself!
    const prop = lib_1.propertySpecification('AWS::IAM::Role', 'AssumeRolePolicyDocument');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineResourcePolicy);
});
test('spot-check IAM resource tags', () => {
    const prop = lib_1.propertySpecification('AWS::KMS::Key', 'KeyPolicy');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.InlineResourcePolicy);
});
test('spot-check resource policy resources', () => {
    expect(lib_1.resourceSpecification('AWS::S3::BucketPolicy').ScrutinyType).toEqual(schema_1.ResourceScrutinyType.ResourcePolicyResource);
});
test('spot-check no misclassified tags', () => {
    const prop = lib_1.propertySpecification('AWS::SNS::Subscription', 'DeliveryPolicy');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.None);
});
test('check Lambda permission resource scrutiny', () => {
    expect(lib_1.resourceSpecification('AWS::Lambda::Permission').ScrutinyType).toEqual(schema_1.ResourceScrutinyType.LambdaPermission);
});
test('check role managedpolicyarns', () => {
    const prop = lib_1.propertySpecification('AWS::IAM::Role', 'ManagedPolicyArns');
    expect(prop.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.ManagedPolicies);
});
test('check securityGroup scrutinies', () => {
    const inProp = lib_1.propertySpecification('AWS::EC2::SecurityGroup', 'SecurityGroupIngress');
    expect(inProp.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.IngressRules);
    const eProp = lib_1.propertySpecification('AWS::EC2::SecurityGroup', 'SecurityGroupEgress');
    expect(eProp.ScrutinyType).toEqual(schema_1.PropertyScrutinyType.EgressRules);
});
test('check securityGroupRule scrutinies', () => {
    const inRes = lib_1.resourceSpecification('AWS::EC2::SecurityGroupIngress');
    expect(inRes.ScrutinyType).toEqual(schema_1.ResourceScrutinyType.IngressRuleResource);
    const eRes = lib_1.resourceSpecification('AWS::EC2::SecurityGroupEgress');
    expect(eRes.ScrutinyType).toEqual(schema_1.ResourceScrutinyType.EgressRuleResource);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NydXRpbnkudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNjcnV0aW55LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBc0U7QUFDdEUsMENBQTJFO0FBRTNFLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxJQUFJLEdBQUcsMkJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakUsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNqRixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsd0ZBQXdGO0lBQ3hGLE1BQU0sSUFBSSxHQUFHLDJCQUFxQixDQUFDLGdCQUFnQixFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFDakYsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMvRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxJQUFJLEdBQUcsMkJBQXFCLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDL0UsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ2hELE1BQU0sQ0FBQywyQkFBcUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQzNILENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtJQUM1QyxNQUFNLElBQUksR0FBRywyQkFBcUIsQ0FBQyx3QkFBd0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9FLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtJQUNyRCxNQUFNLENBQUMsMkJBQXFCLENBQUMseUJBQXlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2SCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxJQUFJLEdBQUcsMkJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMxRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7SUFDMUMsTUFBTSxNQUFNLEdBQUcsMkJBQXFCLENBQUMseUJBQXlCLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUN4RixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUV2RSxNQUFNLEtBQUssR0FBRywyQkFBcUIsQ0FBQyx5QkFBeUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxNQUFNLEtBQUssR0FBRywyQkFBcUIsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUFvQixDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFN0UsTUFBTSxJQUFJLEdBQUcsMkJBQXFCLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUNwRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvcGVydHlTcGVjaWZpY2F0aW9uLCByZXNvdXJjZVNwZWNpZmljYXRpb24gfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgUHJvcGVydHlTY3J1dGlueVR5cGUsIFJlc291cmNlU2NydXRpbnlUeXBlIH0gZnJvbSAnLi4vbGliL3NjaGVtYSc7XG5cbnRlc3QoJ3Nwb3QtY2hlY2sgSUFNIGlkZW50aXR5IHRhZ3MnLCAoKSA9PiB7XG4gIGNvbnN0IHByb3AgPSBwcm9wZXJ0eVNwZWNpZmljYXRpb24oJ0FXUzo6SUFNOjpSb2xlJywgJ1BvbGljaWVzJyk7XG4gIGV4cGVjdChwcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5JbmxpbmVJZGVudGl0eVBvbGljaWVzKTtcbn0pO1xuXG50ZXN0KCdJQU0gQXNzdW1lUm9sZVBvbGljeScsICgpID0+IHtcbiAgLy8gQXNzdW1lUm9sZVBvbGljeURvY3VtZW50IGlzIGEgcmVzb3VyY2UgcG9saWN5LCBiZWNhdXNlIGl0IGFwcGxpZXMgdG8gdGhlIFJvbGUgaXRzZWxmIVxuICBjb25zdCBwcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OklBTTo6Um9sZScsICdBc3N1bWVSb2xlUG9saWN5RG9jdW1lbnQnKTtcbiAgZXhwZWN0KHByb3AuU2NydXRpbnlUeXBlKS50b0VxdWFsKFByb3BlcnR5U2NydXRpbnlUeXBlLklubGluZVJlc291cmNlUG9saWN5KTtcbn0pO1xuXG50ZXN0KCdzcG90LWNoZWNrIElBTSByZXNvdXJjZSB0YWdzJywgKCkgPT4ge1xuICBjb25zdCBwcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OktNUzo6S2V5JywgJ0tleVBvbGljeScpO1xuICBleHBlY3QocHJvcC5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUHJvcGVydHlTY3J1dGlueVR5cGUuSW5saW5lUmVzb3VyY2VQb2xpY3kpO1xufSk7XG5cbnRlc3QoJ3Nwb3QtY2hlY2sgcmVzb3VyY2UgcG9saWN5IHJlc291cmNlcycsICgpID0+IHtcbiAgZXhwZWN0KHJlc291cmNlU3BlY2lmaWNhdGlvbignQVdTOjpTMzo6QnVja2V0UG9saWN5JykuU2NydXRpbnlUeXBlKS50b0VxdWFsKFJlc291cmNlU2NydXRpbnlUeXBlLlJlc291cmNlUG9saWN5UmVzb3VyY2UpO1xufSk7XG5cbnRlc3QoJ3Nwb3QtY2hlY2sgbm8gbWlzY2xhc3NpZmllZCB0YWdzJywgKCkgPT4ge1xuICBjb25zdCBwcm9wID0gcHJvcGVydHlTcGVjaWZpY2F0aW9uKCdBV1M6OlNOUzo6U3Vic2NyaXB0aW9uJywgJ0RlbGl2ZXJ5UG9saWN5Jyk7XG4gIGV4cGVjdChwcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5Ob25lKTtcbn0pO1xuXG50ZXN0KCdjaGVjayBMYW1iZGEgcGVybWlzc2lvbiByZXNvdXJjZSBzY3J1dGlueScsICgpID0+IHtcbiAgZXhwZWN0KHJlc291cmNlU3BlY2lmaWNhdGlvbignQVdTOjpMYW1iZGE6OlBlcm1pc3Npb24nKS5TY3J1dGlueVR5cGUpLnRvRXF1YWwoUmVzb3VyY2VTY3J1dGlueVR5cGUuTGFtYmRhUGVybWlzc2lvbik7XG59KTtcblxudGVzdCgnY2hlY2sgcm9sZSBtYW5hZ2VkcG9saWN5YXJucycsICgpID0+IHtcbiAgY29uc3QgcHJvcCA9IHByb3BlcnR5U3BlY2lmaWNhdGlvbignQVdTOjpJQU06OlJvbGUnLCAnTWFuYWdlZFBvbGljeUFybnMnKTtcbiAgZXhwZWN0KHByb3AuU2NydXRpbnlUeXBlKS50b0VxdWFsKFByb3BlcnR5U2NydXRpbnlUeXBlLk1hbmFnZWRQb2xpY2llcyk7XG59KTtcblxudGVzdCgnY2hlY2sgc2VjdXJpdHlHcm91cCBzY3J1dGluaWVzJywgKCkgPT4ge1xuICBjb25zdCBpblByb3AgPSBwcm9wZXJ0eVNwZWNpZmljYXRpb24oJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywgJ1NlY3VyaXR5R3JvdXBJbmdyZXNzJyk7XG4gIGV4cGVjdChpblByb3AuU2NydXRpbnlUeXBlKS50b0VxdWFsKFByb3BlcnR5U2NydXRpbnlUeXBlLkluZ3Jlc3NSdWxlcyk7XG5cbiAgY29uc3QgZVByb3AgPSBwcm9wZXJ0eVNwZWNpZmljYXRpb24oJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywgJ1NlY3VyaXR5R3JvdXBFZ3Jlc3MnKTtcbiAgZXhwZWN0KGVQcm9wLlNjcnV0aW55VHlwZSkudG9FcXVhbChQcm9wZXJ0eVNjcnV0aW55VHlwZS5FZ3Jlc3NSdWxlcyk7XG59KTtcblxudGVzdCgnY2hlY2sgc2VjdXJpdHlHcm91cFJ1bGUgc2NydXRpbmllcycsICgpID0+IHtcbiAgY29uc3QgaW5SZXMgPSByZXNvdXJjZVNwZWNpZmljYXRpb24oJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwSW5ncmVzcycpO1xuICBleHBlY3QoaW5SZXMuU2NydXRpbnlUeXBlKS50b0VxdWFsKFJlc291cmNlU2NydXRpbnlUeXBlLkluZ3Jlc3NSdWxlUmVzb3VyY2UpO1xuXG4gIGNvbnN0IGVSZXMgPSByZXNvdXJjZVNwZWNpZmljYXRpb24oJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwRWdyZXNzJyk7XG4gIGV4cGVjdChlUmVzLlNjcnV0aW55VHlwZSkudG9FcXVhbChSZXNvdXJjZVNjcnV0aW55VHlwZS5FZ3Jlc3NSdWxlUmVzb3VyY2UpO1xufSk7Il19